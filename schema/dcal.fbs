
// Session management data
namespace DCAL.session;

enum Magic:uint { INVALID = 0, HELLO = 123, NACK = 404, ACK = 555 }

table Handshake {
	server:bool = false;
	magic:Magic;
	ip:string;
	api_level: uint;
	// on error, the NACK can be used to send back SDK or DCAL error codes
	error: uint;
}

table Event {
	e_type: uint;
	status: uint;
	reason: uint;
	eth_addr: string;
	flags: ushort;
}

table U32 {
	value: uint;
}

table String {
	value: string;
}

table Status {
	cardState:uint;
	ProfileName:string;
	ssid:[ubyte];
	channel:uint;
	rssi:int;
	clientName:string;
	mac:[ubyte];
	ip:[ubyte];
	ipv6:[string];
	AP_mac:[ubyte];
	AP_ip:[ubyte];
	AP_name:string;
	bitRate:uint;
	txPower:uint;
	dtim:uint;
	beaconPeriod:uint;
	numipv6addrs: uint;
}

table Version {
	sdk: uint;
	chipset: uint;
	sys: uint;
	driver: uint;
	firmware:string;
	supplicant: string;
	release: string;
	dcas: uint;
}

table Globals {
	auth: uint;
	channel_set_a: uint;
	channel_set_b: uint;
	auto_profile: bool;
	beacon_miss: uint;
	ccx: bool;
	cert_path:string;
	date_check:bool;
	def_adhoc: uint;
	fips: bool;
	pmk: uint;
	probe_delay: uint;
	regdomain: uint;
	roam_periodms: uint;
	roam_trigger: uint;
	rts: uint;
	scan_dfs: uint;
	ttls: uint;
	uapsd: bool;
	wmm: bool;
	ignore_null_ssid: bool;
	dfs_channels: uint;
}

table Profile {
	name:string;
	ssid:[ubyte];
	client_name:string;
	txPwr:uint;
	pwrsave:uint;
	pspDelay:uint;
	weptype:uint;
	auth:uint;
	eap:uint;
	bitrate:uint;
	radiomode:uint;
	security1:string;
	security2:string;
	security3:string;
	security4:string;
	security5:string;
	weptxkey:uint;
	autoprofile: bool = false;
}

table Interface {
	interface_name:string;
	prop:uint;
	ipv4:bool;
	method:string;
	auto_start:uint;
	address:string;
	netmask:string;
	netmask6:string;
	gateway:string;
	broadcast:string;
	nameserver:string;
	state:uint;
	bridge:uint;
	ap_mode:uint;
	nat:uint;
	prop6:uint;
	ipv6:bool;
	method6:string;
	address6:string;
	gateway6:string;
	nameserver6:string;
	state6:uint;
	nat6:uint;
}

table P_entry {
	name:string;
	active:bool = false;
	autoprof:bool = false;
}

table Profile_list {
	profiles:[P_entry];
}

table Scan_item {
	channel: ubyte;
	rssi: int;
	securityMask: uint;
	bss: bool; // false == infrastructure; true == adhoc
	mac: [ubyte];
	ssid: [ubyte];
}

table Scan_list {
	items: [Scan_item];
}

table Time {
	tv_sec: int;
	tv_usec: int;
}

table Filexfer {
	file_path: string;
	size: int;
	mode: int;
}

// commands payloads to dcas - can be unused for some commands
union Cmd_pl { Globals, Profile, Interface, U32, String, Time, Filexfer }

enum Commands:uint {
	INVALID =0,
	GETVERSIONS,
	GETSTATUS,
	GETGLOBALS,
	SETGLOBALS,
	GETPROFILE,
	SETPROFILE,
	DELPROFILE,
	GETPROFILELIST,
	GETSCANLIST,
	ACTIVATEPROFILE,
	SETINTERFACE,
	DELINTERFACE,
	WIFIENABLE,
	WIFIDISABLE,
	WIFIRESTART,
	SYSTEMREBOOT,
	SETTIME,
	GETTIME,
	NTPDATE,
	FILEPUSH,
	FILEPULL,
	FWUPDATE,
	CLIFILE,
	GETLOGS,
	}

table Command {
	command:Commands;
	cmd_pl: Cmd_pl;
}
